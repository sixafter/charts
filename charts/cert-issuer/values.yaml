# Global configuration for the ClusterIssuer Helm chart
# Ref: https://doc.crds.dev/github.com/jetstack/cert-manager/cert-manager.io/ClusterIssuer/v1

# Additional global values for advanced use cases can be added below.
# For example, annotations, labels, or custom configurations.
global:
  annotations: {}
  # Provide additional annotations that can be applied to resources created by this chart.
  labels: {}
  # Provide additional labels that can be applied to resources created by this chart.

# Namespace where cert-manager is installed
# This should match the namespace in which cert-manager is deployed.
certManagerNamespace: "cert-manager"
# This namespace must match where cert-manager is installed. Change this value if cert-manager is deployed in a custom namespace.

# ACME Issuer Configuration
acme:
  # Enable or disable the creation of an ACME ClusterIssuer.
  # Set to true to create the ACME ClusterIssuer, or false to exclude it.
  enabled: true

  # The email address to use for the ACME account registration.
  # Required by Let's Encrypt for notifications about certificate expiration or updates.
  email: "user@example.com"

  # The ACME server URL.
  # Use the production endpoint for real certificates:
  #   https://acme-v02.api.letsencrypt.org/directory
  # Use the staging endpoint for testing (does not issue trusted certificates):
  #   https://acme-staging-v02.api.letsencrypt.org/directory
  server: "https://acme-staging-v02.api.letsencrypt.org/directory"

  # The name of the Kubernetes Secret where the ACME private key will be stored.
  privateKeySecretRef: "acme-private-key"

  # Private Key Management for the ACME Account
  privateKey:
    # Set to true to allow the Helm chart to create a Kubernetes Secret for the ACME private key.
    # If set to false, the Secret will either be automatically created and managed by cert-manager,
    # or an existing Secret must be provided in advance.
    create: false

    # Base64-encoded private key for the ACME account.
    # This is required only if `create` is set to true.
    # To generate a private key manually:
    #   openssl genpkey -algorithm RSA -out private.key -pkeyopt rsa_keygen_bits:2048
    # Then encode the private key to Base64:
    #   base64 private.key
    # Finally, paste the result here.
    data: ""

  # Solvers for ACME challenges supporting dns01 and http01 with multiple configurations.
  solvers:
    # Define solvers for ACME challenges. Multiple solvers can be defined to handle different DNS zones or methods.
    - selector:
        dnsZones:
          # List of DNS zones that this solver will handle.
          - "example.com"
          - "sub.example.com"
      dns01:
        - route53:
            region: "us-east-1"
            hostedZoneID: "Z1234567890ABC"
        - cloudflare:
            apiTokenSecretRef:
              name: "cloudflare-token"
              key: "token"
    - selector:
        dnsZones:
          - "example.org"
          - "another.example.org"
      http01:
        - ingress:
            class: "nginx"
        - ingress:
            class: "traefik"

# Vault Issuer Configuration
vault:
  # Enable or disable the creation of a Vault ClusterIssuer.
  # Vault issuers are useful for integrating with internal PKI systems managed through Vault.
  # Set to true to create the Vault ClusterIssuer, or false to exclude it.
  enabled: false

  # Vault server configuration.
  server: "https://vault.example.com"
  path: "pki/issue/example-dot-com"
  auth:
    tokenSecretRef:
      name: "vault-token"
      key: "token"

# Self-Signed Issuer Configuration
selfSigned:
  # Enable or disable the creation of a self-signed ClusterIssuer.
  # Self-signed issuers are typically used for testing or internal purposes where external validation is not required.
  # Set to true to create the self-signed ClusterIssuer, or false to exclude it.
  enabled: false
